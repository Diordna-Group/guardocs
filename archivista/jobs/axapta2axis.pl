#!/usr/bin/perl

=head1 tosca2axis.pl

Reads an index file with fields (generated by the ERP solution tosca),
moves the same given pdf file to the ftp folder and creates an axis file

=cut

use strict;
use File::Copy;

my $dir = "/home/data/archivista/ftp"; # destination path
my $ds = '/'; # Unix=/, Windows=\
my $file = shift; # get the file name (incl. path)
my $fpdf;
if (-e $file) {
  # file does exist
  my ($fname,$db) = getFileDB($file); # get the desired file name and db
  $fpdf = $fname; # create the pdf file name (same as txt, but ending with pdf)
	$fpdf =~ s/\.TXT$/\.pdf/; 
	my $fields = getFields($file); # read the index field values  
	$file =~ s/\.TXT$/\.pdf/; # from now on, the file must have the ending pdf
	$fname = $fpdf;
  my $fout = "$dir$ds$fpdf";
  foreach (my $c=0;$c<100;$c++) {
	  last if (!-e $fout); # check for a unique file name
  	$fname=TimeStamp().'.pdf';
    $fout = "$dir$ds$fname";
  }
  if (!-e $fout) {
	  # if in destination dir the file is not available, just move it
    move($file,$fout);
    my $pinfo = getInfos("$dir$ds",$fname,$db);
		$$pinfo{Fields} = $fields if $fields ne "";
		$$pinfo{ImportSource} = "1"; # we don't want an OCR text recognition
    # create axis-file from the infos and delete the csv-file
    createAXIS($pinfo,$dir); # create axis information
	}
}






=head2 ($fname,$db)=getFileDB($file)

Gives back the filename and the database

=cut

sub getFileDB {
  my $file = shift;
  my @parts = split($ds,$file);
  my $fname = pop @parts;
  my $db = pop @parts;
  if ($db eq "pdf") {
    my $db1 = pop @parts;
		if ($db eq "archivista") {
  	  $db = $db1;
		} else {
		  $db = "archivista";
		}
  }
	return ($fname,$db);
}






=head2 \%infos=getInfos( $dir,$file )

  Returns an Pointer to an Hash with the need Information.
  As that are: 

  File Name:         We get the FILE NAME from the perl script
                     so we don't need to parse it.
  Date:              The Name of the File is also the DATE when it was scanned.
  Destination:       If thier's an DESTINATION in the csv-file then we get that
                     else we send it to the default Database.
  Paper Size:        Default is A4 if their aren't other infos.
  Number of Pages:   We get the number of Pages from pdfinfo.
  Width:             We get the WIDTH from identify $file
  Height:            We get the HEIGHT from identify $file
  X/Y Resolution:    Default 300
  Bits per Pixel:    We get that info from identify it's 4th and 5th info
                     if the 4th is DirectClass -> 24 Bits
                     if the 4th is PseudoClass and the 5th is 256c -> 8 Bits
                 and if the 4th is PseudoClass and the 5th is 2c -> 1 Bits
  Format:            We allways get TIFF-files
  Profil:            We can't get this Info so it's empty
  Paper Orientation: If Height is larger than Width we have Portrait 
                                                      else Landscape

=cut

sub getInfos {
  my $dir = shift;
  my $file = shift;
	my $db = shift;
  my %info;
  my $line = getIdentify("$dir$file");
  my @lines = split("\n",$line);
  my @temp = split(" ",$lines[0]);
  $file =~ s/\..*/\.pdf/g;
  #$file =~ s/-//g;
  $info{'File name'}="$dir$file";
  $file =~ s/\..*//g;
  $info{'Date'}=$file;
  $info{'Destination'}=$db; # desired database
  $info{'Paper size'}="A4";
  $info{'Number of pages'}=$#lines + 1;
  ($info{'Width'},$info{'Height'})=split('x',$temp[2]);
	# correction from points to pixels
	$info{Width} = int $info{Width} * 4.166;
	$info{Height} = int $info{Height} * 4.166;
  $info{'X Resolution (DPI)'}=300;
  $info{'Y Resolution (DPI)'}=300;
  $info{'Bits per pixel'}=1;
  $info{'Format'}=$temp[1];
  if($info{'Height'} > $info{'Width'}){
    $info{'Paper Orientation'}='Portrait';
  }
  else {
    $info{'Paper Orientation'}='Landscape';
  }
  return \%info;
}






=head2 String getIdentify( $dir,$file )

Returns the Information of identify $file.

=cut

sub getIdentify {
  my $file = shift;
  my $result;
  my $system = "identify -ping \"$file\"";
  $result = `$system`;
  return $result;
}






=head2 void createAXIS( $phash,$dir )

Writes an Index-File like AXIS for our PDF-File.

=cut

sub createAXIS {
  my $phash = shift;
  my $outfile = $phash->{'File name'};
  $outfile =~ s/\.pdf/\.txt/g;
  open(FOUT,">$outfile");
  binmode(FOUT);
  foreach my $key (keys %$phash){
    print FOUT "$key"," "x(21-length($key)),"= ",$phash->{"$key"},"\n";
  }
  print FOUT "NonAxisFile"," "x9,"= 1\n";
  print FOUT "NoOCRfromCUPS"," "x9,"= 1\n";
  close(FOUT);
}






=head2 $stamp=TimeStamp 

Actual date/time stamp (20040323130556)

=cut

sub TimeStamp {
  my @t = localtime( time() );
  my ( $stamp, $y, $m, $d, $h, $mi, $s );
  $y     = $t[5] + 1900;
  $m     = $t[4] + 1;
  $m     = sprintf( "%02d", $m );
  $d     = sprintf( "%02d", $t[3] );
  $h     = sprintf( "%02d", $t[2] );
  $mi    = sprintf( "%02d", $t[1] );
  $s     = sprintf( "%02d", $t[0] );
  $stamp = $y . $m . $d . $h . $mi . $s;
  return $stamp;
}





sub getFields {
  my $file = shift;
	my (@lines,$out,%flds);
	if (-e $file) {
	  open(FIN,"$file");
		binmode(FIN);
		@lines = <FIN>;
		close(FIN);
		foreach (@lines) {
		  my $z = $_;
			chomp $z;
			$z =~ s/\r//g;
			$z =~ s/\n//g;
			my @a = split("=",$z);
			my $key = shift @a;
			my $val = join("=",@a);
			$flds{$key}=$val if checkFieldsExtra($key,$val,\%flds)==0;
		}
		foreach (keys %flds) {
			$out = $out . ":" if $out ne "";
			my $key = $_;
			my $val = $flds{$key};
			$val =~ s/:/ /;
			$val =~ s/;/ /;
			$out = $out . "$key=$val";
		}
	}
	unlink $file if (-e $file);
	return $out;
}





sub checkFieldsExtra {
  my $key = shift;
	my $val = shift;
	my $pfld = shift;
	my $gef = shift;

  my @felder;
	if ($val eq "") {
	  $gef=1;
	} else {
		if ($key eq "KategorieNr") {
			if ($val eq "LS") {
				$$pfld{KategorieNr}="Bli";
				$$pfld{Kategorie}="Bewegungsdaten - Lieferscheine";
		  } elsif ($val eq "RE") {
				$$pfld{KategorieNr}="BFa";
				$$pfld{Kategorie}="Bewegungsdaten - Fakturen";
			} elsif ($val eq "BE" || $val eq "BA") {
				$$pfld{KategorieNr}="BBe";
				$$pfld{Kategorie}="Bewegungsdaten - Bestellungen";
			} elsif ($val eq "AB" || $val eq "RB") {
				$$pfld{KategorieNr}="BAb";
				$$pfld{Kategorie}="Bewegungsdaten - Auftragsbestätigungen";
			}
			$$pfld{Eigentuemer}="archiv";
			$gef=1;
		} elsif ($key eq "Firma") {
		  $val = uc($val);
			$$pfld{Firma}=$val;
			$gef=1;
		}
	}
	return $gef;
}
		
		


